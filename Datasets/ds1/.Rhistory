is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
is_h1n1pdm
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
distances_h3n2 = getDistances(path_h3n2, trees_h1n1pdm, SFS_metadata, is_h3n2)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10(limits=c(0.01,5))+
scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
# scale_x_log10(limits=c(0.01,5))+
# scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10()+
scale_y_log10()+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 5, yend = 5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10(limits=c(0.01,5))+
scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
plot(p_ne)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
# plot the skyline graphs
Ne_plot = Ne[which(Ne$runnr<12 & Ne$runnr>0),]
p_skyline <- ggplot(data=Ne_plot)+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper,fill=state, group=state, alpha=0.2))+
geom_line(aes(x=time, y=median,color=state, group=state, linetype = "median estimate"))+
geom_line(aes(x=time, y=true,color=state, group=state, linetype = "true value"))+
facet_wrap(runnr~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()
plot(p_skyline)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
p_skyline <- ggplot(data=Ne_plot)+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper,fill=state, group=state), alpha=0.2)+
geom_line(aes(x=time, y=median,color=state, group=state, linetype = "median estimate"))+
geom_line(aes(x=time, y=true,color=state, group=state, linetype = "true value"))+
facet_wrap(runnr~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()
plot(p_skyline)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
out_files
out_files = list.files(path="./out_converted/", pattern = "*.out", full.names=T)
out_files
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
dat$optimise
levels(dat$optimise) = c("no transformation", "log transform", "sqrt transform")
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_acceptance.pdf", sep=""),width=9, height=4.5)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
dat$optimise
dat$optimise = factor(dat$optimise, levels() = c("no transformation", "log transform", "sqrt transform"))
dat$optimise = factor(dat$optimise, levels = c("no transformation", "log transform", "sqrt transform"))
dat$optimise
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
# drops the transforms
dat$optimise = factor(dat$optimise, levels = c("no transformation"))
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.001,1))+
theme_minimal() +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_temperature.pdf", sep=""),width=9, height=4.5)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=seq(0,5*10^6,10^7))
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7))
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7)) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = comma) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
require(scales)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = comma) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0","5*10^6","10^7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",expression("5*10^6"),"10^7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
))))p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",expression(paste("5*10", ^6)),expression("10^7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",expression(paste("5*10", ^6)),expression("10^7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",expression(paste("5*10", ^6)),expression("10^7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",bquote(5*10^6),expression("10^7"))) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",bquote('5*', 10^6),expression("10^7"))) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",bquote('5*', *10^6),expression("10^7"))) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = c("0",bquote('5*'~10^6),expression("10^7"))) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels = scientific) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_x_continuous(labels=trans_format('log10',math_format(10^.x))) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_transform_acceptance.pdf", sep=""),width=9, height=4.5)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
p.post <- ggplot(na.omit(dat))+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7)) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(.~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_acceptance.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(a.omit(dat))+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.001,1))+
scale_x_continuous(breaks=c(0,5*10^6,10^7)) +
theme_minimal() +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(.~swap, ncol=2)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_temperature.pdf", sep=""),width=9, height=4.5)
p.post <- ggplot(na.omit(dat))+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.001,1))+
scale_x_continuous(breaks=c(0,5*10^6,10^7)) +
theme_minimal() +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(.~swap, ncol=2)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/skyline_temperature.pdf", sep=""),width=9, height=4.5)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
p.post <- ggplot(na.omit(dat))+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
theme_minimal() +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(.~swap, ncol=2)
plot(p.post)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_brewer(name="target\nacceptance\nprobability", type = 'seq', palette = 1)+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
ggsave(plot=p.post,paste("../../../CoupledMCMC-Text/Figures/mascot_transform_acceptance.pdf", sep=""),width=9, height=9)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_brewer(name="target\nacceptance\nprobability", type = 'seq', palette = 3)+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_manual(name="target\nacceptance\nprobability", values = my_orange)+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
library(RColorBrewer)
my_orange = brewer.pal(n = 5, "Oranges")[2:5]
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_manual(name="target\nacceptance\nprobability", values = my_orange)+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
theme_minimal() +
scale_y_continuous(breaks=c(0.1,0.3,0.5,0.7)) +
scale_x_continuous(breaks=c(0,5*10^6,10^7), labels=c("0","5e6","1e7")) +
ylab("average acceptance probability") +
scale_color_manual(name="target\nacceptance\nprobability", values = rev(my_orange))+
facet_wrap(optimise~swap, ncol=2)
plot(p.post)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysisMascot.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
trees
cladeprob
trees
p_clade = ggplot(data = transform(cladeprob,
method=factor(method,levels=c("MCMC", "target propability = 0.1", "target propability = 0.3", "target propability = 0.5")))) +
geom_point(aes(x=prob1, y=prob2, color=replicate)) +
facet_wrap(.~method,ncol=2) +
ylab("clade probabilities in first run") +
xlab("clade probabilities in replicate run") +
theme_minimal() +
theme(panel.spacing = unit(1, "lines")) +
scale_colour_manual(name="replicate run", values=c("2" = col0, "3" = col1, "4"=col2, "5"=col4))
plot(p_clade)
trees
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
tree1
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
source('~/Documents/github/CoupledMCMC-Material/Datasets/ds1/plotAnalysis.R', echo=TRUE)
p_clade = ggplot(data = transform(cladeprob,
method=factor(method,levels=c("MCMC", "target propability = 0.5", "target propability = 0.3", "target propability = 0.1")))) +
geom_point(aes(x=prob1, y=prob2, color=replicate)) +
facet_wrap(.~method,ncol=2) +
ylab("clade probabilities in first run") +
xlab("clade probabilities in replicate run") +
theme_minimal() +
theme(panel.spacing = unit(1, "lines")) +
scale_colour_manual(name="replicate run", values=c("2" = col0, "3" = col1, "4"=col2, "5"=col4))
plot(p_clade)
ggsave(plot=p_clade,paste("/Users/nicmuell/Documents/github/CoupledMCMC-Text/Figures/Clade_probabilities.pdf", sep=""),width=6, height=5)
