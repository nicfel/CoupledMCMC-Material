if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
dsa
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
if (endsWith(as.character(SFS_metadata[i,"age"]), "m")){
age = 0
}else{
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
}
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
# SFS_analysis_data$weights = 0
# # compute the weights
# for (i in seq(1,length(SFS_analysis_data$strain))){
#   SFS_analysis_data[i,"weights"] = 1/sum(SFS_analysis_data$age_group==SFS_analysis_data[i,"age_group"])
# }
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
if (endsWith(as.character(SFS_metadata[i,"age"]), "m")){
age = 0
}else{
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
}
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1/sum(SFS_analysis_data$subtype==SFS_analysis_data[i,"subtype"])
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(clade=unique(SFS_analysis_data$subtype)), type = "prob")
SFS_analysis_data
SFS_analysis_data$subtype
SFS_analysis_data$subtypeunique(SFS_analysis_data$subtype)
unique(SFS_analysis_data$subtype)
probabilities = predict(x, data.frame(clade=unique(SFS_analysis_data$subtype)), type = "prob")
probabilities = predict(x, data.frame(subtype=unique(SFS_analysis_data$subtype)), type = "prob")
probabilities
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
if (endsWith(as.character(SFS_metadata[i,"age"]), "m")){
age = 0
}else{
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
}
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1/sum(SFS_analysis_data$age_group==SFS_analysis_data[i,"age_group"])
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=unique(SFS_analysis_data$subtype)), type = "prob")
# for (a in seq(1,length(probabilities[,1]))){
#   for (b in seq(1,length(probabilities[1,]))){
#     new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$clade)[[a]])
#     if (a==1 && b==1){
#       plot_data = new.dat
#     }else{
#       plot_data = rbind(plot_data,new.dat)
#     }
#   }
# }
#
# p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) + geom_point(size=5) + facet_grid(clade~.)
# p_clade_age <- ggplot(data=SFS_analysis_data, aes(x=clade)) + geom_histogram(stat="count")
#
# plot(p_clade_age)
probabilities
s
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
if (endsWith(as.character(SFS_metadata[i,"age"]), "m")){
age = 0
}else{
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
}
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=unique(SFS_analysis_data$subtype)), type = "prob")
# for (a in seq(1,length(probabilities[,1]))){
#   for (b in seq(1,length(probabilities[1,]))){
#     new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$clade)[[a]])
#     if (a==1 && b==1){
#       plot_data = new.dat
#     }else{
#       plot_data = rbind(plot_data,new.dat)
#     }
#   }
# }
#
# p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) + geom_point(size=5) + facet_grid(clade~.)
# p_clade_age <- ggplot(data=SFS_analysis_data, aes(x=clade)) + geom_histogram(stat="count")
#
# plot(p_clade_age)
s
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=unique(SFS_analysis_data$subtype)), type = "prob")
for (a in seq(1,length(probabilities[,1]))){
for (b in seq(1,length(probabilities[1,]))){
new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$subtype)[[a]])
if (a==1 && b==1){
plot_data = new.dat
}else{
plot_data = rbind(plot_data,new.dat)
}
}
}
p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) + geom_point(size=5) + facet_grid(clade~.)
plot(p_clade_age)
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=age_group), type = "prob")
data.frame(subtype=age_group)
probabilities = predict(x, data.frame(subtype=age_group), type = "prob")
levels(SFS_metadata$age_group) = age_group
SFS_metadata
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=age_group), type = "prob")
x
SFS_metadata$age_group
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
x
SFS_analysis_data$age_group
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$age_group
levels(SFS_analysis_data$age_group)
levels(SFS_analysis_data$age_group) = age_group
levels(SFS_analysis_data$age_group)
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
levels(SFS_analysis_data$age_group) = age_group
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=age_group), type = "prob")
probabilities
x
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
c
x
s = summary(x)
probabilities = predict(x, data.frame(subtype=age_group), type = "prob")
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
levels(SFS_analysis_data$age_group) = age_group
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=c("h1n1pdm", "h3n2")), type = "prob")
for (a in seq(1,length(probabilities[,1]))){
for (b in seq(1,length(probabilities[1,]))){
new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$subtype)[[a]])
if (a==1 && b==1){
plot_data = new.dat
}else{
plot_data = rbind(plot_data,new.dat)
}
}
}
p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) + geom_point(size=5) + facet_grid(clade~.)
plot(p_clade_age)
probabilities
x
s
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
levels(SFS_analysis_data$age_group) = age_group
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1/(sum(SFS_analysis_data$age_group==SFS_analysis_data[i,"age_group"]))
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=c("h1n1pdm", "h3n2")), type = "prob")
for (a in seq(1,length(probabilities[,1]))){
for (b in seq(1,length(probabilities[1,]))){
new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$subtype)[[a]])
if (a==1 && b==1){
plot_data = new.dat
}else{
plot_data = rbind(plot_data,new.dat)
}
}
}
p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) + geom_point(size=5) + facet_grid(clade~.)
plot(p_clade_age)
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
levels(SFS_analysis_data$age_group) = age_group
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1/(sum(SFS_analysis_data$age_group==SFS_analysis_data[i,"age_group"]))
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=c("h1n1pdm", "h3n2")), type = "prob")
for (a in seq(1,length(probabilities[,1]))){
for (b in seq(1,length(probabilities[1,]))){
new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$subtype)[[a]])
if (a==1 && b==1){
plot_data = new.dat
}else{
plot_data = rbind(plot_data,new.dat)
}
}
}
p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) +
geom_point(size=5) +
facet_grid(clade~.) +
xlabel("")+
ylable("probability of being in age group")
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & (SFS_metadata$h3n2 | SFS_metadata$h1n1pdm)),]
SFS_analysis_data$subtype = "unknown"
SFS_analysis_data[which(SFS_analysis_data$h1n1pdm),"subtype"] = "h1n1pdm"
SFS_analysis_data[which(SFS_analysis_data$h3n2),"subtype"] = "h3n2"
levels(SFS_analysis_data$age_group) = age_group
# dsa
SFS_analysis_data$weights = 0
# compute the weights
for (i in seq(1,length(SFS_analysis_data$strain))){
SFS_analysis_data[i,"weights"] = 1/(sum(SFS_analysis_data$age_group==SFS_analysis_data[i,"age_group"]))
}
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(age_group ~ subtype -1, weights= weights, data = SFS_analysis_data)
s = summary(x)
probabilities = predict(x, data.frame(subtype=c("h1n1pdm", "h3n2")), type = "prob")
for (a in seq(1,length(probabilities[,1]))){
for (b in seq(1,length(probabilities[1,]))){
new.dat = data.frame(x=unique(SFS_analysis_data$age_group)[[b]], y=probabilities[a,b], clade=unique(SFS_analysis_data$subtype)[[a]])
if (a==1 && b==1){
plot_data = new.dat
}else{
plot_data = rbind(plot_data,new.dat)
}
}
}
p_clade_age <- ggplot(data=plot_data, aes(x=x,y=y, color=clade)) +
geom_point(size=5) +
facet_grid(clade~.) +
xlab("")+
ylab("probability of being in age group")
plot(p_clade_age)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/analyseAIMrun.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_color_OkabeIto()+
facet_wrap(swap~., ncol=1) +
theme(legend.title =  "target probability")
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_acceptance.pdf", sep=""),width=6, height=3)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_color_OkabeIto()+
facet_wrap(swap~., ncol=1) +
theme(legend.title =  element_text("target probability"))
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_acceptance.pdf", sep=""),width=6, height=3)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_color_OkabeIto()+
facet_wrap(swap~., ncol=1) +
theme(legend.title =  element_text("target probability"))
plot(p.post)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_color_OkabeIto()+
facet_wrap(swap~., ncol=1)
# +
#   theme(legend.title =  element_text("target probability"))
plot(p.post)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
scale_color_OkabeIto(name="target acceptance probability")+
facet_wrap(swap~., ncol=1)
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_acceptance.pdf", sep=""),width=6, height=3)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
ggsave(plot=p.post,paste("../../Figures/skyline_temperature.pdf", sep=""),width=6, height=3)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.01,1))+
theme_minimal() +
scale_color_OkabeIto(name="target acceptance probability")+
facet_wrap(swap~., ncol=1)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_temperature.pdf", sep=""),width=6, height=3)
source('~/Documents/github/CoupledMCMC-Material/Datasets/optimiseTemperature/plotAnalysis.R')
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
ylab("average acceptance probability")
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(swap~., ncol=1)
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_acceptance.pdf", sep=""),width=6, height=3)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.01,1))+
theme_minimal() +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(swap~., ncol=1)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_temperature.pdf", sep=""),width=6, height=3)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=acceptance, color=target, group=number),size=1)+
# scale_x_log10()+
theme_minimal() +
ylab("average acceptance probability") +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(swap~., ncol=1)
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_acceptance.pdf", sep=""),width=6, height=3)
p.post <- ggplot(dat)+
geom_line(aes(x=iteration,y=temperature, color=target, group=number),size=1)+
scale_y_log10(limits=c(0.01,1))+
theme_minimal() +
scale_color_OkabeIto(name="target\nacceptance\nprobability")+
facet_wrap(swap~., ncol=1)
# theme(legend.position = "none")
plot(p.post)
ggsave(plot=p.post,paste("../../Figures/skyline_temperature.pdf", sep=""),width=6, height=3)
source('~/Documents/github/CoupledMCMC-Material/Datasets/validation/plotValidation.R')
source('~/Documents/github/CoupledMCMC-Material/Datasets/validation/plotValidation.R')
